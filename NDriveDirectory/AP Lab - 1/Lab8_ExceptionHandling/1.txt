a. NameError
Raised when a variable or function name is not defined in the current scope.
Example:
print(x)  # Raises NameError because x is not defined

b. ValueError
Raised when a function receives an argument of the right type but an inappropriate value.
Example:
int("abc")  # Raises ValueError because "abc" cannot be converted to an integer

c. AttributeError
Raised when an attribute reference or assignment fails. This typically happens when an object does not have the requested attribute.
Example:
x = 10
x.append(5)  # Raises AttributeError because an integer object has no append method

d. IndexError
Raised when an index is out of range for a list, tuple, or similar sequence.
Example:
lst = [1, 2, 3]
print(lst[5])  # Raises IndexError because the index 5 is out of range

e. KeyError
Raised when trying to access a dictionary key that does not exist.
Example:
d = {"a": 1, "b": 2}
print(d["c"])  # Raises KeyError because "c" is not a key in the dictionary

f. SyntaxError
Raised when the code violates Python's syntax rules.
Example:
if True    # Raises SyntaxError because the colon (:) is missing
    print("Hello")

g. IOError
Raised when an input/output operation (like file handling) fails. Starting with Python 3.3, this is a subclass of **OSError**.
Example:
with open("non_existent_file.txt", "r") as f:  # Raises IOError if the file doesn't exist
    content = f.read()

h. ImportError
Raised when an import statement fails to find the module or the imported name cannot be found.
Example:
import non_existent_module  # Raises ImportError because the module does not exist

i. ZeroDivisionError
Raised when a division or modulo operation is attempted with a divisor of zero.
Example:
x = 10 / 0  # Raises ZeroDivisionError because division by zero is not allowed